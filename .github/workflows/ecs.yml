
name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: notes-app
        IMAGE_TAG: latest
      run: |
        docker build -t notes_app .
        docker tag notes_app:latest 891376966913.dkr.ecr.us-east-1.amazonaws.com/notes_app:latest
        docker push 891376966913.dkr.ecr.us-east-1.amazonaws.com/notes_app:latest

    # - name: Deploy to ECS
    #   env:
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
    #     SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
    #     TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
    #   run: |
    #     aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION

    # - name: Run Integration Tests
    #   env:
    #     TEST_URL: ${{ secrets.TEST_URL }}
    #   run: |
    #     curl --fail $TEST_URL || exit 1

    # - name: Rollback on failure
    #   if: failure()
    #   env:
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
    #     SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
    #     TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
    #   run: |
    #     aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEFINITION --region $AWS_REGION